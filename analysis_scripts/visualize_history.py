from __future__ import annotations
from typing import Optional
import typer
from enum import Enum
import jsonpickle
import graphviz
import treeswift as ts

class CurrentStatus(Enum):
    EXTINCT = 0
    EXTANT = 1
    ANCIENT = 2


COLORMAP = {
    "extinct": "#FF004D55",
    "extant": "#00875155",
    "ancient": "#ffffff",
}


def main(
    input: str = typer.Option(..., "--input", "-i"),
    output: str = typer.Option(..., "--output", "-o"),
):
    with open(input) as f:
        tree: ts.Tree = jsonpickle.decode(f.read())
    dot = graphviz.Digraph(comment="Generated by hm01")
    for n in tree.traverse_preorder():
        if (not n.is_root()) and n.parent.is_root() and n.is_leaf():
            continue
        status = CurrentStatus.ANCIENT
        if n.is_leaf():
            status = CurrentStatus.EXTANT if n.extant else CurrentStatus.EXTINCT
        tmpl = (
            f"""
        <TR>
    <TD>cut_size</TD>
    <TD>{n.cut_size}</TD>
  </TR>
  <TR>
    <TD>threshold</TD>
    <TD>{round(n.validity_threshold, 2)}</TD>
  </TR>
        """
            if hasattr(n, "cut_size")
            else ""
        )
        dot.node(
            n.label,
            f"""<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD PORT="here" COLSPAN="2"><B>{n.label if n.label else "Root"}</B></TD>
  </TR>
  <TR>
    <TD>n</TD>
    <TD>{n.num_nodes}</TD>
  </TR>
  {tmpl}
</TABLE>>""",
            style="filled",
            fillcolor=COLORMAP[status.name.lower()],
            shape="none",
        )
        if n.parent:
            dot.edge(n.parent.label, n.label)
    dot.render(output)


if __name__ == "__main__":
    typer.run(main)
