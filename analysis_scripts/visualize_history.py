from __future__ import annotations
from typing import Optional
import typer
from enum import Enum
import jsonpickle
import graphviz
import treeswift as ts
from math import log10


class CurrentStatus(Enum):
    EXTINCT = 0
    EXTANT = 1
    ANCIENT = 2


COLORMAP = {
    "extinct": "#FF004D55",
    "extant": "#00875155",
    "ancient": "#ffffff",
}

def traverse_preorder_skippable(tree : ts.Tree, f):
    stack = []
    stack.append(tree.root)
    while stack:
        n = stack.pop()
        if f(n):
            for c in n.children:
                stack.append(c)

def annotate_num_descendants(tree : ts.Tree):
    for n in tree.traverse_postorder():
        if n.is_leaf():
            n.num_descendants = 1
            n.num_not_extant = not n.extant
        else:
            n.num_descendants = sum([c.num_descendants for c in n.children])
            n.num_not_extant = sum([c.num_not_extant for c in n.children])

def main(
    input: str = typer.Option(..., "--input", "-i"),
    output: str = typer.Option(..., "--output", "-o"),
):
    with open(input) as f:
        tree: ts.Tree = jsonpickle.decode(f.read())
    annotate_num_descendants(tree)
    dot = graphviz.Digraph(comment="Generated by hm01")
    allowlist = set()
    allowlist.update(sorted([n for n in tree.root.children if not n.extant], key = lambda n: (n.num_not_extant + 2 * log10(n.num_nodes)), reverse=True)[:15])
    def g(n: ts.Node):
        if (not n.is_root()) and n.parent.is_root() and n not in allowlist:
            return False
        if (not n.is_root()) and n.parent.is_root() and n.is_leaf():
            return True
        status = CurrentStatus.ANCIENT
        if n.is_leaf():
            status = CurrentStatus.EXTANT if n.extant else CurrentStatus.EXTINCT
        tmpl = (
            f"""
<TR>
    <TD>cut_size</TD>
    <TD>{n.cut_size}</TD>
  </TR>
  <TR>
    <TD>threshold</TD>
    <TD>{round(n.validity_threshold, 2)}</TD>
  </TR>
        """
            if hasattr(n, "cut_size")
            else ""
        )
        dot.node(
            n.label,
            f"""<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD PORT="here" COLSPAN="2"><B>{n.label if n.label else "Root"}</B></TD>
  </TR>
  <TR>
    <TD>n</TD>
    <TD>{n.num_nodes}</TD>
  </TR>
  {tmpl}
</TABLE>>""",
            style="filled",
            fillcolor=COLORMAP[status.name.lower()],
            shape="none",
        )
        if n.parent:
            dot.edge(n.parent.label, n.label)
        return True
    traverse_preorder_skippable(tree, g)
    dot.render(output)

if __name__ == "__main__":
    typer.run(main)
